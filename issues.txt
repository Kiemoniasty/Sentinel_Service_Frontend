JWT - token po logowaniu
//TODO: . Dodatkowe weryfikacje (opcjonalnie) W niektórych przypadkach możesz chcieć bardziej precyzyjnych kontroli (np. użytkownik może edytować tylko swoje dane).
//TODO: RESET PASSWORD
//TODO: PROFILE ----HERE
//TODO: JWT WALIDACJA? jeśl old logout

// GENERAL:
// TODO: add TOAST with result in /profile/guid
// TODO: change alerts to toasts in /users
// TODO: update własnych danych z users
// TODO: hash po stronie frontu
// TODO: usunąć guidy z requestów



// notes.txt
Przyszła rozbudowa:
sprawdzanie poprawności struktury przy uruchamianiu jeśli istnieją bazy 
from werkzeug.serving import make_server

class ServerThread(threading.Thread):

    def __init__(self, app):
        threading.Thread.__init__(self)
        self.server = make_server('127.0.0.1', 5000, app)
        self.ctx = app.app_context()
        self.ctx.push()

    def run(self):
        log.info('starting server')
        self.server.serve_forever()

    def shutdown(self):
        self.server.shutdown()

def start_server():
    global server
    app = flask.Flask('myapp')
    # App routes defined here
    server = ServerThread(app)
    server.start()
    log.info('server started')

def stop_server():
    global server
    server.shutdown()
Source: https://stackoverflow.com/questions/15562446/how-to-stop-flask-application-without-using-ctrl-c
zmiana default portów
ustawianie retencję danych w bucketach

instalowanie baz za pośrednictwem frontu:
interaktywne okno do łączenia z bazą Postgres
scrypt, który łaczy się domyślnym hasłem, i je zmienia - przygotowuje strukture
interaktywne okno do łączenia z bazą Influxa

W ustawieniach opcja testu połączenia z bazami
Customize Messages for logger
planowanie maintenance
stan serwera - obecne zużycie zasobów
Planowanie, przypominanie i rekurencyjność maintenance
Logi:
w influxie i dokumencie,
built-in logger source: https://flask.palletsprojects.com/en/3.0.x/quickstart/#deploying-to-a-web-server
log imienne dla serwisów
log kiedy serwer wstał, czy połączono z bazą, czy serwer działa prawidłowo
info za każdym requestem czy udało się połączyć z bazą:
        
Influx:
    client = InfluxDBClient(
        url=influxdb_url, token=influxdb_token, org=influxdb_org
    )

    health = client.health()

    if health.status == "pass":
        print("connected to influx")
    else:
        print("lul co se myślisz")

Log kto i kiedy utworzył/modyfikował/usunął usługe
Test czy serwis dodawany jest dostępny
Powiadomienia dla wskazanych userów/grup - logowanie tego

// todo.txt
Users:
    paginacja w userach
    walidacja numerów telefonów, email-i,
    czy połączyć search/get i put/post/change_pass
Services:
    paginacja w userach
    wszystkie dane na wejściu na lowercase
    walidacja czy unikalne wartości w kolumnach wyznaczonych
    walidacja numerów telefonów, email-i,
    czy połączyć search/get i put/post/change_pass

logika powiadomień
dodać graphy